                GestureDetector(
                  onTap: () {},
                  child: Center(
                    child: Stack(
                      alignment: Alignment.bottomRight,
                      children: [
                        imageDetector(
                          state.user.photoUrl!,
                          100,
                          isCircle: true,
                          radius: 100,
                        ),
                        Positioned(
                          bottom: 2,
                          right: 2,
                          child: SizedBox(
                            width: 30,
                            height: 30,
                            child: IconButton(
                              iconSize: 15,
                              color: Colors.white,
                              style: IconButton.styleFrom(
                                backgroundColor: Colors.blueAccent,
                                shape: CircleBorder(),
                                overlayColor: Colors.transparent,
                              ),
                              onPressed: () {},
                              icon: Icon((Icons.edit)),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),

                ============================================

                old userdatacubit

                // import 'dart:async';
// import 'dart:developer';

// import 'package:chat_app/core/di/service_locator.dart';
// import 'package:chat_app/data/models/user_model.dart';
// import 'package:chat_app/domain/repositories/user_repository.dart';
// import 'package:chat_app/domain/usecases/get_incoming_requests_stream_usecase.dart';
// import 'package:chat_app/domain/usecases/get_outgoing_requests_stream_usecase.dart';
// // import 'package:chat_app/domain/usecases/get_user_from_local_database_usecase.dart';
// import 'package:chat_app/domain/usecases/get_user_database_reference_usecase.dart';
// import 'package:chat_app/domain/usecases/reject_friend_request_usecase.dart';
// import 'package:chat_app/domain/usecases/send_friend_request_usecase.dart';
// import 'package:chat_app/presentation/bloc/home/user_data/user_data_state.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:flutter_bloc/flutter_bloc.dart';

// class UserDataCubit extends Cubit<UserDataState> {
//   // final GetUserFromLocalDatabaseUsecase _getUserFromLocalDatabaseUsecase;
// final GetUserDatabaseReferenceUsecase _getUserDatabaseReferenceUsecase;
// final SendFriendRequestUsecase _sendFriendRequestUsecase;
// StreamSubscription? _userDataSubscription;
// StreamSubscription? _authStateSubscription;
// StreamSubscription? _incomingRequestsSubscription;
// StreamSubscription? _outgoingRequestsSubscription;
// String? _currentUserId;
// final GetIncomingRequestsStreamUsecase _getIncomingRequestsStreamUsecase;
// final GetOutgoingRequestsStreamUsecase _getOutgoingRequestsStreamUsecase;
// final RejectFriendRequestUsecase _rejectFriendRequestUsecase;

//   UserDataCubit({required UserRepository userRepository})
//     : // _getUserFromLocalDatabaseUsecase =
//       //       getIt<GetUserFromLocalDatabaseUsecase>(),
//       _getUserDatabaseReferenceUsecase =
//           getIt<GetUserDatabaseReferenceUsecase>(),
//       _sendFriendRequestUsecase = getIt<SendFriendRequestUsecase>(),
//       _getIncomingRequestsStreamUsecase =
//           getIt<GetIncomingRequestsStreamUsecase>(),
//       _getOutgoingRequestsStreamUsecase =
//           getIt<GetOutgoingRequestsStreamUsecase>(),
//       _rejectFriendRequestUsecase = getIt<RejectFriendRequestUsecase>(),
//       super(InitialState()) {
//     _listenToAuthChanges();
//     _loadUserData();
//     _loadIncomingRequests();
//     _loadOutgoingRequests();
//   }

//   Future<void> _loadUserData() async {
//     // Cancel any existing subscription
//     await _userDataSubscription?.cancel();

//     // Only emit loading state if we don't already have user data loaded
//     if (state is! UserDataLoadedState &&
//         state is! IncomingRequestsLoadedState) {
//       emit(LoadingState());
//     }

//     try {
//       final dbRef = await _getUserDatabaseReferenceUsecase.call();

//       // Store the subscription so we can cancel it later
//       _userDataSubscription = dbRef.onValue.listen(
//         (event) {
//           if (event.snapshot.value != null) {
//             try {
//               final userModel = UserModel.fromJson(
//                 Map<String, dynamic>.from(event.snapshot.value as Map),
//               );

//               // Preserve existing data if available
//               final currentState = state;
//               List<Map<String, String>>? existingIncomingRequests;
//               List<Map<String, String>>? existingOutgoingRequests;

//               if (currentState is UserDataLoadedState) {
//                 existingIncomingRequests = currentState.incomingRequests;
//                 existingOutgoingRequests = currentState.outgoingRequests;
//               } else if (currentState is IncomingRequestsLoadedState) {
//                 existingIncomingRequests = currentState.incomingRequests;
//               }

//               emit(
//                 UserDataLoadedState(
//                   user: userModel.toEntity(),
//                   incomingRequests: existingIncomingRequests,
//                   outgoingRequests: existingOutgoingRequests,
//                   // Don't preserve messages/errors to avoid duplicate notifications
//                 ),
//               );
//             } catch (e) {
//               log('Error parsing user data: $e');
//               emit(FailureState(error: 'Failed to load user data'));
//             }
//           } else {
//             log('User data is null');
//             emit(FailureState(error: 'User data not found'));
//           }
//         },
//         onError: (error) {
//           log('Stream error: $error');
//           emit(FailureState(error: 'Failed to load user data'));
//         },
//       );
//     } catch (e) {
//       log('Error getting database reference: $e');
//       emit(FailureState(error: e.toString()));
//     }
//   }

//   /// Listen to Firebase Auth state changes to detect user changes
//   void _listenToAuthChanges() {
//     _authStateSubscription = getIt<FirebaseAuth>().authStateChanges().listen((
//       User? user,
//     ) async {
//       final newUserId = user?.uid;

//       // If user changed (including sign out or sign in with different user)
//       if (_currentUserId != newUserId) {
//         _currentUserId = newUserId;

//         if (newUserId != null) {
//           // User signed in (or changed), reload data
//           _loadUserData();
//           _loadIncomingRequests();
//           _loadOutgoingRequests();
//         } else {
//           // User signed out, reset state
//           await _incomingRequestsSubscription?.cancel();
//           await _outgoingRequestsSubscription?.cancel();
//           emit(InitialState());
//         }
//       }
//     });
//   }

//   // Refreshes user data (useful after sign in with different user)
//   Future<void> refreshUserData() async {
//     await _loadUserData();
//   }

//   Future<void> addFriend(String id) async {
//     final currentState = state;

//     // Only proceed if we have a valid UserDataLoadedState
//     if (currentState is! UserDataLoadedState) {
//       log('Cannot add friend: User data not loaded');
//       return;
//     }

//     try {
//       await _sendFriendRequestUsecase.call(id);
//       // Update current state with success message
//       emit(currentState.copyWith(message: "Friend request sent successfully"));
//     } catch (e) {
//       String errorMessage;
//       if (e is FirebaseAuthException) {
//         log("Firebase Auth Exception - Code: ${e.code}, Message: ${e.message}");
//         errorMessage = e.message ?? "Something went wrong";
//       } else {
//         errorMessage = "Something went wrong";
//       }

//       // Update current state with error message
//       emit(currentState.copyWith(error: errorMessage));
//     }
//   }

//   /// Load incoming requests with real-time updates using _loadData pattern
//   Future<void> _loadIncomingRequests() async {
//     // Cancel any existing incoming requests subscription
//     await _incomingRequestsSubscription?.cancel();

//     try {
//       // Store the subscription so we can cancel it later
//       _incomingRequestsSubscription = _getIncomingRequestsStreamUsecase.call().listen(
//         (incomingRequests) {
//           try {
//             // Update the current state with incoming requests data
//             final currentState = state;
//             if (currentState is UserDataLoadedState) {
//               // Update existing UserDataLoadedState with incoming requests
//               // Clear message and error to prevent duplicate notifications
//               emit(
//                 currentState.copyWith(
//                   incomingRequests: incomingRequests,
//                   clearMessage: true,
//                   clearError: true,
//                 ),
//               );
//             } else {
//               // Emit as IncomingRequestsLoadedState if user data not loaded yet
//               emit(
//                 IncomingRequestsLoadedState(incomingRequests: incomingRequests),
//               );
//             }
//             log(
//               'Incoming requests updated: ${incomingRequests.length} requests',
//             );
//           } catch (e) {
//             log('Error processing incoming requests: $e');
//             emit(FailureState(error: 'Failed to load incoming requests'));
//           }
//         },
//         onError: (error) {
//           log('Incoming requests stream error: $error');
//           emit(FailureState(error: 'Failed to load incoming requests'));
//         },
//       );
//     } catch (e) {
//       log('Error setting up incoming requests stream: $e');
//       emit(FailureState(error: e.toString()));
//     }
//   }

//   /// Load outgoing requests with real-time updates using _loadData pattern
//   Future<void> _loadOutgoingRequests() async {
//     // Cancel any existing outgoing requests subscription
//     await _outgoingRequestsSubscription?.cancel();

//     try {
//       // Store the subscription so we can cancel it later
//       _outgoingRequestsSubscription = _getOutgoingRequestsStreamUsecase
//           .call()
//           .listen(
//             (outgoingRequests) {
//               try {
//                 // Update the current state with outgoing requests data
//                 final currentState = state;
//                 if (currentState is UserDataLoadedState) {
//                   // Update existing UserDataLoadedState with outgoing requests
//                   // Clear message and error to prevent duplicate notifications
//                   emit(
//                     currentState.copyWith(
//                       outgoingRequests: outgoingRequests,
//                       clearMessage: true,
//                       clearError: true,
//                     ),
//                   );
//                 }
//                 log(
//                   'Outgoing requests updated: ${outgoingRequests.length} requests',
//                 );
//               } catch (e) {
//                 log('Error processing outgoing requests: $e');
//                 emit(FailureState(error: 'Failed to load outgoing requests'));
//               }
//             },
//             onError: (error) {
//               log('Outgoing requests stream error: $error');
//               emit(FailureState(error: 'Failed to load outgoing requests'));
//             },
//           );
//     } catch (e) {
//       log('Error setting up outgoing requests stream: $e');
//       emit(FailureState(error: e.toString()));
//     }
//   }

//   Future<void> rejectFriendRequest(String id) async {
//     try {
//       await _rejectFriendRequestUsecase.call(id);
//       emit(SuccessState(message: 'Friend request rejected successfully'));
//     } catch (e) {
//       emit(FailureState(error: 'Failed to reject friend request'));
//     }
//   }

//   /// Public method to start listening to incoming requests
//   void getIncomingRequests() {
//     emit(LoadingState());
//     _loadIncomingRequests();
//   }

//   @override
//   Future<void> close() async {
//     await _userDataSubscription?.cancel();
//     await _authStateSubscription?.cancel();
//     await _incomingRequestsSubscription?.cancel();
//     await _outgoingRequestsSubscription?.cancel();
//     return super.close();
//   }
// }

==================================================

home page



import 'package:auto_route/auto_route.dart';
import 'package:chat_app/constants/app_colors.dart';
import 'package:chat_app/core/auto_route/app_router.dart';
import 'package:chat_app/core/di/service_locator.dart';
import 'package:chat_app/domain/entities/friend_entity.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:chat_app/presentation/bloc/home/user_data/user_data_cubit.dart';
import 'package:chat_app/presentation/bloc/home/user_data/user_data_state.dart';
import 'package:chat_app/presentation/bloc/connectivity/connectivity_cubit.dart';
import 'package:chat_app/presentation/bloc/connectivity/connectivity_states.dart';
import 'package:chat_app/presentation/widgets/custom_icon_button.dart';
import 'package:chat_app/presentation/widgets/custom_text_field.dart';
import 'package:chat_app/presentation/widgets/friend_request_widget.dart';
import 'package:chat_app/presentation/widgets/friend_widget.dart';
import 'package:chat_app/presentation/widgets/image_detector.dart';
import 'package:chat_app/presentation/widgets/toastification_toast.dart';
import 'package:chat_app/utils/friends_data_sample.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:toastification/toastification.dart';

@RoutePage()
class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    final TextEditingController _addFriendController = TextEditingController();

    return BlocConsumer<ConnectivityCubit, ConnectivityState>(
      listenWhen: (previous, current) {
        return (current is ConnectivityConnected &&
                previous is ConnectivityDisconnected) ||
            (current is ConnectivityDisconnected &&
                previous is ConnectivityConnected) ||
            current is ConnectivityError;
      },
      listener: (context, state) {
        if (state is ConnectivityDisconnected) {
          showToastification(
            context,
            "Internet connection Lost",
            Colors.red,
            ToastificationType.error,
          );
        }

        if (state is ConnectivityConnected) {
          showToastification(
            context,
            "Internet connection restored",
            Colors.green,
            ToastificationType.error,
          );
        }

        if (state is ConnectivityError) {
          showToastification(
            context,
            "Connectivity Error",
            Colors.red,
            ToastificationType.error,
          );
        }
      },
      builder: (context, state) {
        return BlocListener<UserDataCubit, UserDataState>(
          listener: (context, state) {
            if (state is FailureState) {
              showToastification(
                context,
                state.error!,
                Colors.red,
                ToastificationType.error,
              );
            }

            if (state is SuccessState) {
              showToastification(
                context,
                state.message!,
                Colors.green,
                ToastificationType.success,
              );
            }

            if (state is UserDataLoadedState) {
              // Handle success messages within UserDataLoadedState
              if (state.message != null) {
                showToastification(
                  context,
                  state.message!,
                  Colors.green,
                  ToastificationType.success,
                );
              }

              // Handle error messages within UserDataLoadedState
              if (state.error != null) {
                showToastification(
                  context,
                  state.error!,
                  Colors.red,
                  ToastificationType.error,
                );
              }
            }
          },
          child: BlocBuilder<UserDataCubit, UserDataState>(
            builder: (context, state) {
              final String name;

              if (state is InitialState) {
                // Check if user is still authenticated before initializing
                final auth = getIt<FirebaseAuth>();
                if (auth.currentUser != null) {
                  context.read<UserDataCubit>().initialize();
                } else {
                  // User is not authenticated, show message
                  return Scaffold(
                    backgroundColor: Colors.white,
                    body: const Center(
                      child: Text(
                        'Please log in',
                        style: TextStyle(fontSize: 18),
                      ),
                    ),
                  );
                }
              }

              if (state is LoadingState) {
                return Scaffold(
                  backgroundColor: Colors.white,
                  body: const Center(child: CircularProgressIndicator()),
                );
              }

              if (state is UserDataLoadedState) {
                name = state.user.name.split(' ').first.length > 11
                    ? '${state.user.name.split(' ').first.substring(0, 11)}...'
                    : state.user.name.split(' ').first;

                return DefaultTabController(
                  length: 2,
                  child: Scaffold(
                    backgroundColor: Colors.white,
                    appBar: AppBar(
                      toolbarHeight: 170,
                      backgroundColor: Colors.white,
                      title: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            "Hello,",
                            style: TextStyle(
                              color: Colors.grey.shade400,
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          Text(
                            name,
                            style: TextStyle(
                              color: AppColors.lightBlack,
                              fontSize: 30,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                      actions: [
                        Padding(
                          padding: const EdgeInsets.only(right: 8.0),
                          child: Row(
                            children: [
                              CustomIconButton(
                                size: 40,
                                iconColor: AppColors.lightBlack,
                                borderColor: AppColors.primaryColor,
                                icon: Icons.search,
                                onPressed: () {},
                              ),
                              const SizedBox(width: 10),
                              CustomIconButton(
                                size: 45,
                                iconColor: AppColors.lightBlack,
                                borderColor: Colors.transparent,
                                isIcon: true,
                                onPressed: () =>
                                    context.router.push(const SettingsRoute()),
                                widget: state.user.photoUrl != null
                                    ? imageDetector(
                                        state.user.photoUrl!,
                                        100,
                                        isCircle: true,
                                        radius: 100,
                                      )
                                    : imageDetector(
                                        "https://via.placeholder.com/150",
                                        100,
                                        isCircle: true,
                                        radius: 100,
                                      ),
                              ),
                            ],
                          ),
                        ),
                      ],
                      bottom: PreferredSize(
                        preferredSize: const Size.fromHeight(60),
                        child: Column(
                          children: [
                            Container(
                              margin: const EdgeInsets.symmetric(
                                horizontal: 30,
                                vertical: 20,
                              ),
                              decoration: BoxDecoration(
                                color: Colors.grey.shade200,
                                borderRadius: BorderRadius.circular(30),
                              ),
                              child: TabBar(
                                dividerColor: Colors.transparent,
                                overlayColor: WidgetStateProperty.all(
                                  Colors.transparent,
                                ),
                                indicator: BoxDecoration(
                                  color: AppColors.primaryColor,
                                  borderRadius: BorderRadius.circular(30),
                                ),
                                labelColor: Colors.white,
                                unselectedLabelColor: Colors.grey.shade600,
                                isScrollable: false,
                                indicatorSize: TabBarIndicatorSize.tab,
                                tabs: [
                                  const Tab(
                                    child: Text(
                                      'All Chats',
                                      style: TextStyle(
                                        fontSize: 18,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ),
                                  const Tab(
                                    child: Text(
                                      'Requests',
                                      style: TextStyle(
                                        fontSize: 18,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 20,
                                vertical: 10,
                              ),
                              child: Row(
                                children: [
                                  Expanded(
                                    child: CustomTextField(
                                      hintText: "Add Friend",
                                      textEditingController:
                                          _addFriendController,
                                      errorText: null,
                                    ),
                                  ),
                                  const SizedBox(width: 5),
                                  IconButton(
                                    onPressed: () {
                                      context.read<UserDataCubit>().addFriend(
                                        _addFriendController.text,
                                      );
                                    },
                                    style: IconButton.styleFrom(
                                      backgroundColor: AppColors.primaryColor,
                                      overlayColor: Colors.white,
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(
                                          100,
                                        ),
                                      ),
                                    ),
                                    padding: EdgeInsets.all(13),
                                    icon: Icon(
                                      Icons.person_add_rounded,
                                      color: Colors.white,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    body: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 20.0),
                      child: TabBarView(
                        children: [
                          SizedBox(
                            child: ListView.builder(
                              shrinkWrap: true,
                              physics: const AlwaysScrollableScrollPhysics(),
                              itemCount: 10,
                              itemBuilder: (context, index) {
                                return FriendWidget(
                                  logo: dataSample[index]["logo"],
                                  name: dataSample[index]["name"],
                                  lastMessage: dataSample[index]["lastMessage"],
                                  time: dataSample[index]["time"],
                                  nameFontSize: 20,
                                  lastMessageFontSize: 16,
                                );
                              },
                            ),
                          ),

                          SingleChildScrollView(
                            child: Column(
                              children: [
                                const SizedBox(height: 20),

                                Row(
                                  mainAxisAlignment: MainAxisAlignment.start,
                                  children: [
                                    Text(
                                      "Incoming Requests",
                                      style: TextStyle(
                                        fontSize: 20,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ],
                                ),
                                BlocBuilder<UserDataCubit, UserDataState>(
                                  builder: (context, requestsState) {
                                    List<FriendEntity>? incomingRequests;

                                    // Extract incoming requests from different state types
                                    if (requestsState is UserDataLoadedState) {
                                      incomingRequests =
                                          requestsState.incomingRequests;
                                    } else if (requestsState
                                        is IncomingRequestsLoadedState) {
                                      incomingRequests =
                                          requestsState.incomingRequests;
                                    }

                                    if (incomingRequests != null) {
                                      if (incomingRequests.isEmpty) {
                                        return Padding(
                                          padding: const EdgeInsets.all(20.0),
                                          child: Text(
                                            "No incoming requests",
                                            style: TextStyle(
                                              fontSize: 16,
                                              color: Colors.grey.shade600,
                                            ),
                                          ),
                                        );
                                      }

                                      return ListView.builder(
                                        shrinkWrap: true,
                                        physics:
                                            const NeverScrollableScrollPhysics(),
                                        itemCount: incomingRequests.length,
                                        itemBuilder: (context, index) {
                                          final request =
                                              incomingRequests![index];
                                          return FriendRequestWidget(
                                            profilePicture:
                                                request.photoUrl ??
                                                'https://via.placeholder.com/150',
                                            name: request.name,
                                            isIncoming: true,
                                            onAccept: () {
                                              // TODO: Implement accept friend request
                                              showToastification(
                                                context,
                                                "Friend request accepted",
                                                Colors.green,
                                                ToastificationType.success,
                                              );
                                            },
                                            onReject: () {
                                              // TODO: Implement reject friend request
                                              showToastification(
                                                context,
                                                "Friend request rejected",
                                                Colors.red,
                                                ToastificationType.error,
                                              );
                                            },
                                          );
                                        },
                                      );
                                    } else if (requestsState is LoadingState) {
                                      return const Padding(
                                        padding: EdgeInsets.all(20.0),
                                        child: Center(
                                          child: CircularProgressIndicator(),
                                        ),
                                      );
                                    } else if (requestsState is FailureState) {
                                      return Padding(
                                        padding: const EdgeInsets.all(20.0),
                                        child: Text(
                                          "Failed to load incoming requests",
                                          style: TextStyle(
                                            fontSize: 16,
                                            color: Colors.red,
                                          ),
                                        ),
                                      );
                                    }

                                    // Default case - show empty state
                                    return Padding(
                                      padding: const EdgeInsets.all(20.0),
                                      child: Text(
                                        "No incoming requests",
                                        style: TextStyle(
                                          fontSize: 16,
                                          color: Colors.grey.shade600,
                                        ),
                                      ),
                                    );
                                  },
                                ),
                                const SizedBox(height: 20),
                                Row(
                                  mainAxisAlignment: MainAxisAlignment.start,
                                  children: [
                                    Text(
                                      "Outgoing Requests",
                                      style: TextStyle(
                                        fontSize: 20,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ],
                                ),
                                BlocBuilder<UserDataCubit, UserDataState>(
                                  builder: (context, outgoingRequestsState) {
                                    List<FriendEntity>? outgoingRequests;

                                    // Extract outgoing requests from state
                                    if (outgoingRequestsState
                                        is UserDataLoadedState) {
                                      outgoingRequests = outgoingRequestsState
                                          .outgoingRequests;
                                    }

                                    if (outgoingRequests != null) {
                                      if (outgoingRequests.isEmpty) {
                                        return Padding(
                                          padding: const EdgeInsets.all(20.0),
                                          child: Text(
                                            "No outgoing requests",
                                            style: TextStyle(
                                              fontSize: 16,
                                              color: Colors.grey.shade600,
                                            ),
                                          ),
                                        );
                                      }

                                      return ListView.builder(
                                        shrinkWrap: true,
                                        physics:
                                            const NeverScrollableScrollPhysics(),
                                        itemCount: outgoingRequests.length,
                                        itemBuilder: (context, index) {
                                          final request =
                                              outgoingRequests![index];
                                          return FriendRequestWidget(
                                            profilePicture:
                                                request.photoUrl ??
                                                'https://via.placeholder.com/150',
                                            name: request.name,
                                            isIncoming: false,
                                            onReject: () {
                                              // context
                                              //     .read<UserDataCubit>()
                                              //     .rejectFriendRequest(
                                              //       request['receiverId']!,
                                              //     );
                                              showToastification(
                                                context,
                                                state.message!,
                                                Colors.red,
                                                ToastificationType.error,
                                              );
                                            },
                                          );
                                        },
                                      );
                                    } else if (outgoingRequestsState
                                        is LoadingState) {
                                      return const Padding(
                                        padding: EdgeInsets.all(20.0),
                                        child: Center(
                                          child: CircularProgressIndicator(),
                                        ),
                                      );
                                    } else if (outgoingRequestsState
                                        is FailureState) {
                                      return Padding(
                                        padding: const EdgeInsets.all(20.0),
                                        child: Text(
                                          "Failed to load outgoing requests",
                                          style: TextStyle(
                                            fontSize: 16,
                                            color: Colors.red,
                                          ),
                                        ),
                                      );
                                    }

                                    // Default case - show empty state
                                    return Padding(
                                      padding: const EdgeInsets.all(20.0),
                                      child: Text(
                                        "No outgoing requests",
                                        style: TextStyle(
                                          fontSize: 16,
                                          color: Colors.grey.shade600,
                                        ),
                                      ),
                                    );
                                  },
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                );
              }
              return const Scaffold(
                backgroundColor: Colors.white,
                body: Center(child: CircularProgressIndicator()),
              );
            },
          ),
        );
      },
    );
  }
}
